name: Publish Python adapter
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.check.outputs.changed }}
    defaults:
      run:
        working-directory: ./dlog_py
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Compare versions
        id: check
        run: |
          old=$(curl -s 'https://pypi.org/pypi/dlog_py/json' | jq -r '.info.version')
          new=$(awk -F'[ ="]+' '$1 == "version" { print $2 }' Cargo.toml)
          updated='false'; [ $(printf "$new\n$old" | sort -V -r | grep -m1 '') != $old ] && updated='true'
          echo "::set-output name=changed::$updated"

      - name: Log when changed
        if: steps.check.outputs.changed == 'true'
        run: 'echo "Version change found in commit ${{ steps.check.outputs.commit }}!"'

      - name: Log when unchanged
        if: steps.check.outputs.changed == 'false'
        run: 'echo "No version change :/"'

  publish:
    runs-on: ${{ matrix.OS }}
    needs: check
    if: ${{ needs.check.outputs.changed == 'true' }}
    defaults:
      run:
        working-directory: ./dlog_py
    strategy:
      matrix:
        TARGET: [
            x86_64-apple-darwin,
            x86_64-pc-windows-msvc,
            x86_64-unknown-linux-gnu,
            arm-unknown-linux-gnueabi,
        ]
        python-version: [
            3.6,
            3.7,
            3.8,
            3.9
        ]
        include:
          - OS: macos-latest
            CROSS: false
            TARGET: x86_64-apple-darwin
          - OS: windows-latest
            CROSS: false
            TARGET: x86_64-pc-windows-msvc
          - OS: ubuntu-latest
            CROSS: false
            TARGET: x86_64-unknown-linux-gnu
          - OS: ubuntu-latest
            CROSS: false
            TARGET: arm-unknown-linux-gnueabi
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install maturin
        run: python -m pip install --upgrade pip maturin

      - name: Setup cargo toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.TARGET }}
          override: true

      - name: Build configuration
        run: echo "Building for ${{ matrix.TARGET }}"

      - name: Build rust
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p dlog_py --release --target ${{ matrix.TARGET }}
          use-cross: ${{ matrix.CROSS }}

      - name: Publish
        env:
          MATURIN_PASSWORD: ${{ secrets.MATURIN_PASSWORD }}
        run: maturin publish --target ${{ matrix.TARGET }} --skip-existing --no-sdist --username ${{ secrets.MATURIN_USER }}

  arm:
    runs-on: ${{ matrix.OS }}
    container:
      image: arm32v7/rust
      options: >-
        --entrypoint bash
    defaults:
      run:
        working-directory: ./dlog_py
    strategy:
      matrix:
        TARGET: [
            arm-unknown-linux-gnueabihf,
        ]
        python-version: [
            3.6
        ]
        include:
          - OS: ubuntu-latest
            TARGET: arm-unknown-linux-gnueabihf
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install maturin
        run: python -m pip install --upgrade pip maturin

      - name: Setup cargo toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.TARGET }}
          override: true

      - name: Build configuration
        run: echo "Building for ${{ matrix.TARGET }}"

      - name: Publish
        env:
          PYO3_CROSS_LIB_DIR: "/opt/python/cp36-cp36m/lib"
          MATURIN_PASSWORD: ${{ secrets.MATURIN_PASSWORD }}
        run: maturin build --target ${{ matrix.TARGET }} --skip-existing --no-sdist --username ${{ secrets.MATURIN_USER }}
